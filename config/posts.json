{
  "posts": [
    {
      "content": "思路比较简单，题解如有写的不好的地方请指正。写这篇题解是为了巩固一下，因为查错查了很久。\n<!-- more -->\n\n我们可以把 “$112123123412345123456……n$” 分解成：\n\n$1$ $12$ $123$ $1234$ $12345$ $123456$ $......$ $123$ $……$ $n$\n\n那我们首先想到的是**对每一个子序列的长度进行求解**：\n\n经过实践，我们可以发现一个规律：\n**当这个数是 $n$ 位数时：$len_i=len_{i-1}+n$**\n\n这个预处理是非常简单的，代码如下：\n\n```cpp\nfor(int j=1; j<=9; j++) \n\tlen[j]=len[j-1]+1;\nfor(int j=10; j<=99; j++) \n\tlen[j]=len[j-1]+2;\nfor(int j=100; j<=999; j++) \n\tlen[j]=len[j-1]+3;\nfor(int j=1000; j<=9999; j++) \n\tlen[j]=len[j-1]+4;\nfor(int j=10000; j<=99999; j++)\n\tlen[j]=len[j-1]+5;\n```\n\n\n------------\n\n\n### 总体思路：\n---\n1. 判断 $n$ 处于哪一个子序列中（假设在第 $i$ 个子序列中）。\n2. 计算 $n$ 是第 $i$ 个子序列的第几个字符。\n3. 每次给第 $i$ 个子序列添加一个数（原来为空），如果该子序列的长度已经达到了 $n$ ，那么就输出该子序列的第 $n$ 个字符。\n\n---\n### 完整代码：\n---\n```cpp \n#include<bits/stdc++.h>\nusing namespace std;\nlong long t,n,sum=0,i=0;\nint len[100010];\nstring s;\ninline string zs(int a)//把一个 int 数值转换成 string 类 \n{\n\tstring s=\"\\0\";\n\twhile(a>0)\n\t{\n\t\ts+=a%10+48;\n\t\ta/=10;\n\t}\n\tfor(int i=0; i<s.size()/2; i++)\n\t\tswap(s[i],s[s.size()-1-i]);\n\treturn s;\n}\nint main()\n{\n\tcin>>t;\n\t//------预处理------// \n\tfor(int j=1; j<=9; j++)\n\t\tlen[j]=len[j-1]+1;\n\tfor(int j=10; j<=99; j++) \n\t\tlen[j]=len[j-1]+2;\n\tfor(int j=100; j<=999; j++)\n\t\tlen[j]=len[j-1]+3;\n\tfor(int j=1000; j<=9999; j++) \n\t\tlen[j]=len[j-1]+4;\n\tfor(int j=10000; j<=99999; j++) \n\t\tlen[j]=len[j-1]+5;\n\t\t\n\tfor(int g=1; g<=t; g++)\n\t{\n\t\tcin>>n;\n\t\ts=\"\",sum=0,i=0;//记得把要重复使用的变量清零 \n\t\twhile(sum<n) \n        \t\tsum+=len[++i];//Step1 \n\t\tn-=sum-len[i];//Step2\n\t\ti=1;\n\t\twhile(1)//Step3\n\t\t{\n\t\t\tstring s2=zs(i);\n\t\t\ts=s+s2;\n\t\t\tif(s.size()>=n)\n\t\t\t{\n\t\t\t\tcout<<s[n-1]<<\"\\n\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\t\n\t}\n\n\treturn 0;\n}\n```",
      "data": {
        "title": "P1895 数字序列 Solution",
        "date": "2021-12-03 14:13:18",
        "tags": [
          "题解"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "思路比较简单，题解如有写的不好的地方请指正。写这篇题解是为了巩固一下，因为查错查了很久。",
      "fileName": "luoguP1895-number-sequence-Solution"
    },
    {
      "content": "首先，我们来分析一下每一个规则：\n\n1. 若【前三个字符】为 $101$ 时表示需要转换为字母 $A-Z$ ，字母 $A$ 代码为  $10100000$ ，字母 $C$ 为 $10100010$ ， $26$ 个大写字母以字母表顺序按照这种规律顺序排列，分别对应一个**二进制代码**。\n\n对于第 $1$ 个规则，该单元是用**第 $4$ 位到第 $8$ 位**来表示这一个字母的二进制代码（ $00000-11010$ 分别代表 $A-Z$）。那么，重点来了： **如果第 $4$ 位到第 $8$ 位所表示的 $2$ 进制数比 $11010$ 大，那么就是“Error”**。\n\n2. 若【前三个字符】为 $111$ ，则该单元翻译为空格。\n\n第 $2$ 个规则，非常好判断。\n\n3. 若【第一个字符】为 $0$ ，则该单元表示一个数，待定与 下一个单元所表示的数做加法。加法过程中，这两个单元应转换为十进制，然后除以 $2$ 取整再相加，加法结束后，这两个单元做加法得到的结果即为这两个单元的翻译结果（翻译结果用十进制表示，这两个单元**就都翻译完毕了**）。\n\n对于第 $3$ 个规则，如果出现加法单元，那么它必定是**成对出现**的，如果没有满足条件，那么就是“Error”。\n\n---\n因为我们可能在判断某一个单元的途中发现“Error”，所以我们需要一个字符串 $ ans $ 来储存答案。\n\n---\n---\n## ${\\color{SkyBlue}General}$  ${\\color{SkyBlue}Ideas}$\n**重点是判断“Error”的情况。**\n\n那么如何判断是否“Error”呢？如下：\n\n- Error-1. 某个单元不完整。\n- Error-2. 代码中出现别的奇奇怪怪的字符。\n- Error-3. 加法单元没有成对出现。\n- Error-4. 字母单元所表示的字符不在 $A-Z$ 范围内。\n\n---\n---\n## ${\\color{SkyBlue}Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstring s,ans; \nint a,b;\nbool p=false;\ninline string zs(int x)\n{\n\tstring s=\"\\0\";\n\tif(x==0) return \"0\";\n\twhile(x>0) s+=x%10+48,x/=10;\n\treverse(s.begin(),s.end());//用 reverse 让 s 倒序 \n\treturn s;\n}\nint main()\n{\n\t#error\\\n\t温馨提示：禁止抄题解\n\tcin>>s;\n\tif(s.size()%8!=0) \n\t\t{printf(\"Error\");return 0;}//Error-1\n\twhile(s.size()>0)\n\t{\n\t\tstring st=s.substr(0,8);//提取出一个单元 \n\t\tfor(int i=0; i<8; i++)\n\t\t\tif(s[i]!='1' && s[i]!='0')//Error-2\n\t\t\t\t{printf(\"Error\");return 0;}\n\t\tif(s[0]=='1' && p==true) //Error-3\n\t\t\t{printf(\"Error\");return 0;}\n\t\tif(s[0]=='1' && s[1]=='1' && s[2]=='1') ans+=\" \";//空格 \n\t\tif(s[0]=='1' && s[1]=='0' && s[2]=='1')//字母 \n\t\t{\n\t\t\tint wq=1,sum=65;\n\t\t\tfor(int i=8-1; i>=3; i--)\n\t\t\t\tsum+=(s[i]-'0')*wq,wq=wq+wq;\n\t\t\tif(sum>90) {printf(\"Error\");return 0;}//Error-4\n\t\t\tans+=char(sum);\n\t\t}\n\t\tif(s[0]=='0')//数字\n\t\t{\n\t\t\tint wq=1,sum=0;\n\t\t\tfor(int i=8-1; i>=0; i--)//把这个单元转换成数字 \n\t\t\t\tsum+=(s[i]-'0')*wq,wq=wq+wq;\n\t\t\tif(p==true)//它是一组加法单元中的第 2 个 \n\t\t\t{\n\t\t\t\tb=sum;\n\t\t\t\ta/=2,b/=2;\n\t\t\t\tans+=zs(a+b);\n\t\t\t\ta=0,b=0;\n\t\t\t}\n\t\t\telse//它是一组加法单元中的第 1 个 \n\t\t\t\ta=sum;\n\t\t\tp=1-p;\n\t\t}\n\t\ts.erase(0,8);//删除一个单元 \n\t} \n\tif(p==true) {printf(\"Error\");return 0;}//最后记得特判！ \n\tcout<<ans;\n \treturn 0;\n}\n```\n---\n说明：By Xin。本人乃2016级小学生，思路比较简单，题解如有写的不好的地方请指正。",
      "data": {
        "title": "P3982  龙盘雪峰信息解析器 Solution",
        "date": "2021-12-03 14:11:53",
        "tags": [
          "题解"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "luoguP3982-Longpan-Xuefeng-information-parser-Solution"
    },
    {
      "content": "\n[可能更好的食用体验](https://www.luogu.com.cn/blog/523641/solution-p1871)\n\n[题目传送门](https://www.luogu.com.cn/problem/P1871)\n\n------------\n## ${\\color{00CD00}{样例解释}}$\n\n```\n10 10 \n+ 6\n+ 10\n+ 5\n- 10\n- 5\n- 6\n+ 10 \n+ 3\n+ 6\n+ 3\n```\n题目已经讲得很清楚了，就是每次打开的对撞机编号一定要与之前所有打开的对撞机编号互质。如第 $2$ 个询问要打开 $10$ 号对撞机，而 $10$ 与前面的 $6$ 不互质，故输出 “ Conflict with $6$ ” 。其他的也就不用我多说了。还有一点要注意，在第 $9$ 个询问中 $6$ 既与 $3$ 冲突也与 $10$ 冲突，不要被样例忽悠了，**输出任意一个都是对的**，我的程序输出就是“ Conflict with $10$ ” 。\n\n\n------------\n\n## ${\\color{00CD00}{主要思路}}$\n\n既然要使每次打开的对撞机编号与之前所有都互质，也就是要使每次打开的对撞机的编号的质因数中不包含之前出现过质因数。我们可以每次将编号进行分解质因数，如果其中的质因数在之前被标记过，则不能开启。如果其中的质因数在之前都没出现过，就开启这个对撞机，并记录这些质因数。开启的代码如下：\n```cpp\n\nbool o[100005];//记录是否被开启 \nbool s[100005];//记录质数\nint f[100005];//记录每个质因数属于哪个数\nvoid prime(int r)//筛选质数\n{\n\ts[0]=true,s[1]=true;\n\tfor(int i=2;i<=r;i++)\n\t\tif(s[i]==false)\n\t\t\tfor(int j=i+i;j<=r;j+=i)s[j]=true;\n\treturn;\n}\nint open(int x)\n{\n\tif(o[x])return -1;//-1表示已经开启\n\tint t[1000],g=0;\n\tfor(int i=1;i<=sqrt(x);i++)//分解质因数\n\t{\n\t\tif(x%i==0&&!s[i])//如果i是x的质因数\n\t\t{\n\t\t\tif(f[i]!=0)return f[i];//如果质因数已经存在，返回其所属的数\n\t\t\tt[++g]=i;//否则将质因数存入t数组\n\t\t}\n\t\tif(x%i==0&&i*i!=x&&!s[x/i])//同上\n\t\t{\n\t\t\tif(f[x/i]!=0)return f[x/i];\n\t\t\tt[++g]=x/i;\n\t\t}\n\t}\n\to[x]=true;\n\tfor(int i=1;i<=g;i++)f[t[i]]=x;//将x的质因数标记为属于x\n\treturn 0;//0表示可以开启\n}\n```\n关闭也很简单，分解其质因数并删除标记即可。\n```cpp\n\nint close(int x)\n{\n\tif(!o[x])return -2;//-2表示已经关闭\n\tfor(int i=1;i<=sqrt(x);i++)//分解质因数\n\t\tif(x%i==0)\n\t\t\tf[i]=0,f[x/i]=0;//删除标记\n\to[x]=false;\n\treturn 0;//0表示可以关闭\n}\n```\n然后就在主程序中判断函数的返回值并输出即可。\n\n------------\n\n## ${\\color{#00CD00}{完整代码}}$\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,m,p,ans;\nbool o[100005];//记录是否被开启 \nbool s[100005];//记录质数 \nint f[100005];//记录每个质因数属于哪个数\n#error\\\n禁止抄题解\nvoid prime(int r)\n{\n\ts[0]=true,s[1]=true;\n\tfor(int i=2;i<=r;i++)\n\t\tif(s[i]==false)\n\t\t\tfor(int j=i+i;j<=r;j+=i)s[j]=true;\n\treturn;\n}\nint open(int x)\n{\n\tif(o[x])return -1;\n\tint t[1000],g=0;\n\tfor(int i=1;i<=sqrt(x);i++)\n\t{\n\t\tif(x%i==0&&!s[i])\n\t\t{\n\t\t\tif(f[i]!=0)return f[i];\n\t\t\tt[++g]=i;\n\t\t}\n\t\tif(x%i==0&&i*i!=x&&!s[x/i])\n\t\t{\n\t\t\tif(f[x/i]!=0)return f[x/i];\n\t\t\tt[++g]=x/i;\n\t\t}\n\t}\n\to[x]=true;\n\tfor(int i=1;i<=g;i++)f[t[i]]=x;\n\treturn 0;\n}\nint close(int x)\n{\n\tif(!o[x])return -2;\n\tfor(int i=1;i<=sqrt(x);i++)\n\t\tif(x%i==0)\n\t\t\tf[i]=0,f[x/i]=0;\n\to[x]=false;\n\treturn 0;\n}\nint main()\n{\n\tcin>>n>>m;\n\tprime(n);//筛选质数\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar ch;cin>>ch>>p;\n\t\tif(ch=='+')ans=open(p);\n\t\telse ans=close(p);\n\t\tswitch(ans)//根据函数返回值输出结果 \n\t\t{\n\t\t\tcase 0:cout<<\"Success\";break;\n\t\t\tcase -1:cout<<\"Already on\";break;\n\t\t\tcase -2:cout<<\"Already off\";break;\n\t\t\tdefault:cout<<\"Conflict with \"<<ans;break;\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}\n\n```\n\n## 温馨提示\n## ${\\color{#FFFFFF}\\colorbox{#AD8800}{题解千万条，理解第一条。直接粘题解，棕名两行泪。} }$",
      "data": {
        "title": "P1871 对撞机 Solution",
        "date": "2021-12-03 14:10:32",
        "tags": [
          "题解"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "luoguP1871-collider-Solution"
    },
    {
      "content": "\n[可能更好的食用体验](https://www.luogu.com.cn/blog/523641/cf955a-feed-the-cat-ti-xie)\n\n[题目传送门](https://www.luogu.com.cn/problem/CF955A)\n\n------------\n这题很简单，直接上代码\n\n```cpp\n\n#pragma G++ optimize(2)\n#include<bits/stdc++.h>\nusing namespace std;\ndouble hh,mm,h,d,c,n;\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>hh>>mm>>h>>d>>c>>n;\n\tif(hh>=20)//如果已经过了20:00，直接以折扣后的价格购买 \n\t{\n\t\tdouble p=ceil(h/n)*c*0.8;//计算折扣后的价格，其中ceil()函数表示向上取整 \n\t\tprintf(\"%.4lf\",p);//使用printf保留4位小数输出 \n\t}\n\telse //还没过20:00时，分情况计算 \n\t{\n\t\tdouble p1=ceil(h/n)*c;//计算醒来后直接去买面包的价钱\n\t\th+=((20-hh)*60-mm)*d;//如果等到20:00再去买面包，增加猫的饥饿值\n\t\tdouble p2=ceil(h/n)*c*0.8;//计算折扣后的价格\n\t\tprintf(\"%.4lf\",min(p1,p2));//输出两个价格之间的较小值 \n\t}\n\treturn 0;\n}\n\n```\n唯一要注意的是翻译中的一句话：\n>“因此从 20:00 开始，面包有 $20$ 的特别折扣”\n\n其中有 $20$ 的特别折扣指价格降低$20$%，即将价格乘$0.8$\n\n${\\color{#FFFFFF}\\colorbox{#AD8800}{题解千万条，理解第一条。直接粘题解，棕名两行泪。} }$",
      "data": {
        "title": "codeforces955A Feed the cat Solution",
        "date": "2021-12-03 14:09:37",
        "tags": [
          "题解"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "codeforces955A-Feed-the-cat-Solution"
    },
    {
      "content": "一名小学六年级蒟蒻第一次参加€＄₱，好紧张~\n\n---\n# 初赛\n\n初赛不得不说真的很恶心（至少对我来说）。值得庆幸的是，我还是以压线的分数顺利（bushi）进入了复赛（吐槽：GD出分真是太慢了╮(╯▽╰)╭）。这里真的要感谢洛谷有题给了我们练习平台，真的很有用！！！同时也感谢我的教练和同学给予的支持与鼓励。\n\n无论如何，只要过了初赛，复赛不用顾虑那么多了。\n\n---\n# 复赛\n\n墙裂推荐《深入浅出程序设计竞赛》！！真的写的很好、很详尽！！\n\n我本来就对复赛没报太大的信心，赛前估分 $<200$，毕竟我也才六年级嘛。不过今年的题确实比以往要简单一点，还没考动规，每道题都能或多或少水一些分。下面我会分享一下我做每道题时的思路、想法、策略、代码等（不过基本都是错误的，就当反面教材来看吧QwQ）。\n\n声明：以下标题后的“自测”都是指洛谷估分。\n\n### T1. 分糖果（[洛谷P7909](https://www.luogu.com.cn/problem/P7909)）$\\ \\ $自测100分\n\n这是我唯一一道做对的题了。我也看了一下其他一些人的AC代码，发现我的代码好像也是最简单的了。下面我也简单的分析一些我这道题的思路：\n\n1. 答案最大只能是 $n-1$，这是毋庸置疑的。\n2. 我们可以先找到小于 $l$ 的最大的 $n$ 的倍数，即$\\left\\lfloor l\\div n \\right\\rfloor\\times n$。这时答案最大只能是$r-\\left\\lfloor l\\div n \\right\\rfloor\\times n$，超过了就拿不了了。\n3. 答案就是 $n-1$ 与 $r-\\left\\lfloor l\\div n \\right\\rfloor\\times n$ 中的最小值。\n\n代码非常之简单，没有奇奇怪怪的条件判断或循环什么的。\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,l,r;\nint main()\n{\n\tfreopen(\"candy.in\",\"r\",stdin);\n\tfreopen(\"candy.out\",\"w\",stdout);\n\tcin>>n>>l>>r;\n\tcout<<min(r-l/n*n,n-1);\n\treturn 0;\n}\n```\n\n### T2.插入排序（[洛谷P7910](https://www.luogu.com.cn/problem/P7910)）$\\ \\ $自测52分\n\n比赛时实在想不出什么好了思路了哇哇哇。。。只好暴力水分了。暴力就没啥好说的了，自己看代码就能看出来。\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,Q,m,x,v;\nint a[8005],p[8005];\nstruct stu{\n\tint s,p;\n}b[8005];\nvoid swap(stu &a,stu &b)\n{stu t=a;a=b,b=t;}\ninline void sort_()\n{\n\tfor(int i=1;i<=n;i++)b[i]=(stu){a[i],i};\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=i;j>1;j--)\n\t\t\tif(b[j].s<b[j-1].s)swap(b[j],b[j-1]);\n\tfor(int i=1;i<=n;i++)p[b[i].p]=i;\n}\nint main()\n{\n\tfreopen(\"sort.in\",\"r\",stdin);\n\tfreopen(\"sort.out\",\"w\",stdout);\n\tscanf(\"%lld%lld\",&n,&Q);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tsort_();\n\tfor(;Q;Q--)\n\t{\n\t\tscanf(\"%lld\",&m);\n\t\tif(m==1)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&x,&v);\n\t\t\ta[x]=v;\n\t\t\tsort_();\n\t\t}\n\t\tif(m==2)\n\t\t{\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tprintf(\"%d%c\",p[x],10);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n我在这题尝试了很多其他方法，耗了不少时间，虽然不会超时，但无一例外的都是答案错误。最后还是选择了暴力。\n\n赛时估分$30$以下，自测$52$分也是令我很意外了，希望€€£的数据能更水点吧（逃）。\n\n### T3.网络连接([洛谷P7911](https://www.luogu.com.cn/problem/P7911))$\\ \\ $自测65分\n\n这题其实就是大模拟啊！但是由于我在第二题花了太多时间，以至于我第三题没有太多时间写，现在想来还有些不甘。我在这题的策略就是不考虑不符合规范的情况，这样可以省不少代码，还能水到不少分数。我的代码如下：\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n;\nstring op,ad;\nchar ch;\nstruct stu{\n\tint a,b,c,d,e;\n\tfriend bool operator< (stu s1,stu s2)\n\t{\n\t\tif(s1.a==s2.a)\n\t\t\tif(s1.b==s2.b)\n\t\t\t\tif(s1.c==s2.c)\n\t\t\t\t\tif(s1.d==s2.d)\n\t\t\t\t\t\treturn s1.e<s2.e;\n\t\t\t\t\telse return s1.d<s2.d;\n\t\t\t\telse return s1.c<s2.c;\n\t\t\telse return s1.b<s2.b;\n\t\telse return s1.a<s2.a;\n\t}//这个重载写死我了\n};\nmap<stu,int>ser;\nint main()\n{\n\tfreopen(\"network.in\",\"r\",stdin);\n\tfreopen(\"network.out\",\"w\",stdout);\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>op;\n\t\tint a,b,c,d,e;\n\t\tscanf(\"%d.%d.%d.%d:%d\",&a,&b,&c,&d,&e);//不考虑不符合规范的情况，格式化输入就行\n\t\tif(a>255||b>255||c>255||d>255||e>65535){cout<<\"ERR\\n\";continue;}\n\t\tstu s=(stu){a,b,c,d,e};\n\t\tif(op==\"Server\")\n\t\t\tif(ser[s]>0)cout<<\"FAIL\\n\";\n\t\t\telse cout<<\"OK\\n\",ser[s]=i;\n\t\telse\n\t\t\tif(ser[s]>0)cout<<ser[s]<<endl;\n\t\t\telse cout<<\"FAIL\\n\";\n\t}\n\treturn 0;\n}\n```\n赛时估分其实也不高，民间数据总能带给人惊喜，不过你谷民间数据一直都不咋靠谱（逃）。\n\n### T4.网络连接([洛谷P7912](https://www.luogu.com.cn/problem/P7912))$\\ \\ $自测10分\n\n这道题请求大佬的帮助。我先来分享一下我的思路：\n\n首先是读入。读入我使用了一个队列数组存储每一个“块”，只要每次读入到的水果与上一个不同，就存储到下一个队列中。\n\n读入代码如下：\n```cpp\nstruct stu\n{int x,p;};//x是水果的种类，p是该水果的位置\nqueue<stu>a[200005];\n\ncin>>n;a[0].front().x=2,x[0]=-1;\nfor(int i=1;i<=n;i++)\n{\n\tscanf(\"%d\",&x[i]);\n\tif(x[i]!=x[i-1])k++;\n\ta[k].push((stu){x[i],i});\n}\n```\n\n接着，我循环枚举每一个队列，只要队列不空就输出队列的队头的位置，并弹出队头。直到所有队列都为空为止。\n```cpp\np=0;//p记录是否有至少一个队列不空\nfor(int i=1;i<=k;i++)\n{\n\tif(!a[i].empty())\n\t{\n\t\tprintf(\"%d \",a[i].front().p);\n\t\ta[i].pop();p=1;\n\t}\n}\n```\n\n如何解决两个“块”合并的问题？可以使用一个变量记录上一个不空的队列编号，只要当前队列的水果与上一个相同，就将当前队列连接到上一个队列的后面。即：每次将当前队列的队头弹出并入到上一个队列中。\n```cpp\nla=0;//la记录上一个不空的队列编号\nfor(int i=1;i<=k;i++)\n\tif(!a[i].empty())\n\t{\n\t\tif(a[i].front().x==a[la].front().x) \n\t\t\twhile(!a[i].empty())\n\t\t\t\ta[la].push(a[i].front()),a[i].pop();\n\t\tla=i;\n\t}\n```\n\n主要思路到这里就介绍完了。下面还是附上完整代码：\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,k,la;\nint x[200005];\nstruct stu\n{int x,p;};\nqueue<stu>a[200005];\nint main()\n{\n\tfreopen(\"fruit.in\",\"r\",stdin);\n\tfreopen(\"fruit.out\",\"w\",stdout);\n\tcin>>n;a[0].front().x=2,x[0]=-1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&x[i]);\n\t\tif(x[i]!=x[i-1])k++;\n\t\ta[k].push((stu){x[i],i});\n\t}\n\tbool p=1;\n\twhile(p)\n\t{\n\t\tp=0;\n\t\tfor(int i=1;i<=k;i++)\n\t\t{\n\t\t\tif(!a[i].empty())\n\t\t\t{\n\t\t\t\tprintf(\"%d \",a[i].front().p);\n\t\t\t\ta[i].pop();p=1;\n\t\t\t}\n\t\t}la=0;\n\t\tfor(int i=1;i<=k;i++)\n\t\t\tif(!a[i].empty())\n\t\t\t{\n\t\t\t\tif(a[i].front().x==a[la].front().x) \n\t\t\t\t\twhile(!a[i].empty())\n\t\t\t\t\t\ta[la].push(a[i].front()),a[i].pop();\n\t\t\t\tla=i;\n\t\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n测评结果如下图（用小号测的，莫见怪）：\n\n[![](https://cdn.luogu.com.cn/upload/image_hosting/o2lxb82z.png)](https://www.luogu.com.cn/record/60979581)\n\nTLE还能理解，为什么会WA呢？请求大佬指出代码/思路的错误。\n\n\n- $upd\\ on\\ 2021.10.27\\ $：现已解决，感谢大佬 ~~（还是我太蒻了啊）~~\n\n---\n\n\n洛谷估分 $100+52+65+10=227$\n\n小图灵 $100+36+65+10=211$\n\n###### 好蒻啊，2=都悬 o(╥﹏╥)o\n\n---\n\n- $upd\\ on\\ 2021.11.01\\ $：€££公布分数 $100+52+65+30=247$，竟然比估分都高（窃喜）！看来我还是低估民间数据了。~~话说为甚么申诉都要收费啊！！！€££硼化硫！！！~~",
      "data": {
        "title": "€＄₱-J2021游记-by.Tao",
        "date": "2021-12-03 14:07:49",
        "tags": [
          "游记"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "CSP-J2021-tripnote-tao"
    },
    {
      "content": "[可能更差的食用体验（？）](https://www.luogu.com.cn/blog/523641/CF1267B)\n\n[题目传送门](https://www.luogu.com.cn/problem/CF1267B)\n\n~~作为翻译人来水一篇题解。~~\n\n鄙人不才，参考了[@gyh20大佬](https://www.luogu.com.cn/blog/gyh20/solution-cf1267b)的思路，并加以优化与说明。\n\n------------\n### ${\\color{RoyalBlue} {样例解释}}$\n\n```txt\nWWWOOOOOOWWW\n```\n这个样例可以在第 $3$ 到第 $9$ 任意一个字符后插入一个“O”，共 $9-3+1=7$ 种方式。\n\n以在第 $5$ 位插入一个“O”为例：第一次中间连续一段的“O”的长度因插入而变长且长度大于等于 $3$ ，满足消除条件。当中间的“O”被消除后，前后两段连续的“B”连成一段（即长度因“O”的消除而变长）且长度大于等于 $3$ ，再次消除。此时所有字符都被消除，即为一种成功的方案。读者可以尝试模拟在其他位置插入其他字符时游戏的过程。\n\n\n------------\n\n### ${\\color{RoyalBlue} {主要思路}}$\n从上面的模拟不难看出，前面的字符必定只能与后面对应的字符连成一段并消除，例如：形如“AABBAAA”、“ABBCCBAA”等的字符串都是合法的，而形如“AABBAABB”、“AABBCCAABB”等的字符串都是不合法的。可以通过比较前后字符的方法从外向内进行消除。不难想到可以维护一个双向队列。\n\n以第一个样例“BBWWBB”为例：\n\n`deque<char>st`\n|B|B|W|W|B|B|\n|-|-|-|-|-|-|\n\n第一次，队列将两头的“B”弹出，并统计出个数为 $4$。个数大于等于 $3$，程序继续进行消除操作。\n\n此时队列为：\n|W|W|\n|-|-|\n\n第二次，队列将两头的“W”弹出，并统计出个数为 $2$。此时队列为空，个数只要大于等于 $2$ 就为合法。此时可以在这一串“W”之间和前、后任意位置插入一个“W”，故答案为 $2+1=3$。\n\n这一段消除的过程可以用以下代码实现：\n```cpp\nlong long cnt=0; \nwhile(!st.empty())\n{\n\tch=st.front(),st.pop_front(),cnt++;\n\tif(st.front()!=ch)break;\n}\nwhile(!st.empty())\n{\n\tch=st.back(),st.pop_back(),cnt++;\n\tif(st.back()!=ch)break;\n}\nif(st.empty()&&cnt>=2)\n{\n\tcout<<cnt+1;\n\treturn 0;\n}\nif(cnt<3)break;\n```\n还有一点要注意：如果队列的队首和队尾字符不相同或者队列的长度只有 $1$，都是不合法的字符串。只需在每次操作前判断一下即可。\n```cpp\nif(st.size()==1||st.front()!=st.back())break;\n```\n总的时间复杂度为 $O(\\ st.size()\\ )$，非常优秀。\n\n------------\n\n### ${\\color{RoyalBlue} {完整代码}}$\n\n```cpp\n#pragma G++ optimize(2)\n#include<bits/stdc++.h>\n#error\\ \n禁止抄题解 \nusing namespace std;\nchar ch;\ndeque<char>st;\nlong long l,r; \nint main()\n{\n\tios::sync_with_stdio(false);\n\twhile(cin>>ch)st.push_back(ch);\n\twhile(!st.empty())\n\t{\n\t\tif(st.size()==1||st.front()!=st.back())break;\n\t\tlong long cnt=0; \n\t\twhile(!st.empty())\n\t\t{\n\t\t\tch=st.front(),st.pop_front(),cnt++;\n\t\t\tif(st.front()!=ch)break;\n\t\t}\n\t\twhile(!st.empty())\n\t\t{\n\t\t\tch=st.back(),st.pop_back(),cnt++;\n\t\t\tif(st.back()!=ch)break;\n\t\t}\n\t\tif(st.empty()&&cnt>=2)\n\t\t{\n\t\t\tcout<<cnt+1;\n\t\t\treturn 0;\n\t\t}\n\t\tif(cnt<3)break;\n\t}\n\tcout<<0;\n\treturn 0;\n}\n```\n\n${\\color{#FFFFFF}\\colorbox{#AD8800}{题解千万条，理解第一条。直接粘题解，棕名两行泪。} }$\n",
      "data": {
        "title": "codeforces1267B Balls of Buma Solution",
        "date": "2021-12-03 14:04:48",
        "tags": [
          "题解"
        ],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "codeforces1267B-Balls-of-Buma-Solution"
    },
    {
      "content": "posted on 2021-09-29 17:50:38 | under 题解 |\n[题目传送门](https://www.luogu.com.cn/problem/P7308)\n\n---\n### ${\\color{SkyBlue}Analysis}$ \n我们需要得到**两个问题**的答案：\n\n1. 上半场总共得了多少分？（整场比赛持续 $4 \\times 12$ 分钟。）\n2. 发生多少次反超？（一次反超定义为一支队伍在得分**小于对方**后，经过投球使得**得分超过对方**。）\n\n---\n### ${\\color{SkyBlue}Ideas}$\n（1）我们首先来解决第一个问题：\n由于整场比赛持续 $4 \\times 12$ 分钟，所以上半场比赛共有 $2*12*60=1440(s)$ 。那么只要 $t_i<=1440$ ，就要增加 $ans$ 。\n\n（2）我们接着解决第二个问题：\n**我们可以先计算每一个时刻的分数**。如果有队伍在之前的分数是小于对方，现在的分数是大于对方，那么这就是反超！~~（其实真的很简单！！）~~\n但是，我们需要注意这种情况：\n\n|A队分数|B队分数|\n| :----------: | :----------: |\n| 3 | 4 |\n| 4 | 4 |\n| 4 | 5 |\n\n这是不算反超的！！（因为B队一直都是领先A队的。）\n\n---\n### ${\\color{SkyBlue}Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,m,ans=0,anss=0,ld;//ld是记录当前谁领先（a=>1,b=>2)\nint a[3000],b[3000],jsa[3000],jsb[3000];\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tif(a[i]<=1440) ans++;//在上半场得分\n\t\tjsa[a[i]]=1;\n\t}\n\tscanf(\"%lld\",&m);\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d\",&b[i]);\n\t\tif(b[i]<=1440) ans++;//在上半场得分\n\t\tjsb[b[i]]=1;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\n\tfor(int i=1; i<=3000; i++)\n\t\tjsa[i]+=jsa[i-1],jsb[i]+=jsb[i-1];//记录每一个时刻的两队分数\n\n\tfor(int i=1; i<=3000; i++)\n\t{\n\t\tif(jsa[i]>jsb[i] && jsa[i-1]==jsb[i-1] && ld==2) //A队反超B队，且在之前是B队领先\n\t\t\tanss++;\n\t\tif(jsa[i]<jsb[i] && jsa[i-1]==jsb[i-1] && ld==1) //B队反超A队，且在之前是A队领先\n\t\t\tanss++;\n\t\tif(jsa[i]!=jsb[i]) //更新领先队伍\n\t\t{\n\t\t\tif(jsa[i]>jsb[i]) ld=1; //A队领先\n\t\t\telse ld=2; //B队领先\n\t\t}\n\t}\n\tprintf(\"%lld\",anss);\n\treturn 0;\n}\n```\n\n---\n说明：By Xin。本人乃2016级小学生，思路比较简单，题解如有写的不好的地方请指正。",
      "data": {
        "title": "luoguP7308 Preokret Solution",
        "date": "2021-09-29 17:50:38",
        "tags": [
          "题解"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/luogup7308-preokret-solution.png"
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "luogup7308-preokret-solution"
    },
    {
      "content": "我是2016级小学生，2022级初中生，2025级高中生，2028级大学生🎓。\n来自GDFSNH。\n\n|语言|C++.HTML.Scrath.CYaRon!|\n|-|:-:|\n|学习中|BFS.DFS.DP.高精度.二分……|\n|获奖|2021CSP-J二等奖.NHOI一等奖.GCOI一等奖|",
      "data": {
        "title": "关于我",
        "date": "2019-01-25 19:09:48",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/about.png"
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    },
    {
      "content": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... \n\n<!-- more -->\n\n[Github](https://github.com/getgridea/gridea)  \n[Gridea 主页](http://hvenotes.fehey.com/)  \n[示例网站](http://fehey.com/)\n\n## 特性👇\n📝  你可以使用最酷的 **Markdown** 语法，进行快速创作  \n\n🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片  \n\n🏷️  你可以对文章进行标签分组  \n\n📋  你可以自定义菜单，甚至可以创建外部链接菜单  \n\n💻  你可以在 **𝖶𝗂𝗇𝖽𝗈𝗐𝗌** 或 **𝖬𝖺𝖼𝖮𝖲** 设备上使用此客户端  \n\n🌎  你可以使用 **𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌** 或 **Coding Pages** 向世界展示，未来将支持更多平台  \n\n💬  你可以进行简单的配置，接入 [Gitalk](https://github.com/gitalk/gitalk) 或 [DisqusJS](https://github.com/SukkaW/DisqusJS) 评论系统  \n\n🇬🇧  你可以使用**中文简体**或**英语**  \n\n🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力  \n\n🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步  \n\n🌱 当然 **Gridea** 还很年轻，有很多不足，但请相信，它会不停向前🏃\n\n未来，它一定会成为你离不开的伙伴\n\n尽情发挥你的才华吧！\n\n😘 Enjoy~\n",
      "data": {
        "title": "Hello Gridea",
        "date": "2018-12-12 00:00:00",
        "tags": [
          "Gridea"
        ],
        "published": true,
        "hideInList": true,
        "feature": "/post-images/hello-gridea.png"
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... ",
      "fileName": "hello-gridea"
    }
  ],
  "tags": [
    {
      "name": "游记",
      "slug": "pyQKfi1jX",
      "used": true
    },
    {
      "name": "题解",
      "slug": "I12pjQx1y",
      "used": true
    },
    {
      "name": "Gridea",
      "slug": "_ynIFznms",
      "used": true
    }
  ],
  "menus": [
    {
      "link": "E:\\北-----乱七八糟の程序\\Gridea\\posts",
      "name": "首页",
      "openType": "External"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "分类",
      "openType": "Internal"
    },
    {
      "link": "https://github.com/xinTtao/xinTtao.github.io/blob/main/posts/about.md",
      "name": "关于",
      "openType": "External"
    }
  ]
}
